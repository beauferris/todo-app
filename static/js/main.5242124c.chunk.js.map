{"version":3,"sources":["components/Task.js","components/NewTask.js","components/Stats.js","App.js","reportWebVitals.js","index.js"],"names":["Task","props","className","type","id","value","checked","onChange","click","htmlFor","content","onClick","NewTask","useState","JSON","parse","localStorage","getItem","setId","useEffect","setItem","complete","key","task","setTask","onSubmit","event","preventDefault","addNewTask","prevState","required","placeholder","target","Stats","count","filter","clear","App","setCount","setFilter","getCount","tasks","setTasks","stringify","filteredTasks","setFilteredTasks","filterTasks","length","checkHandler","newTodos","checkedTask","find","index","indexOf","deleteTask","taskList","map","animation","list","setList","onEnd","newItems","newTasks","keys","forEach","item","push","final","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5242124c.chunk.js","sourcesContent":["import \"./Task.css\"\n\nfunction Task(props){\n    return(<div className=\"task\">\n        <div className=\"content\">\n\n       \n        <input type=\"checkbox\" \n            id={props.id}\n            value={props.id} \n            checked={props.checked}\n            onChange={props.click}></input>\n            \n        <label htmlFor={props.id}> {props.content}</label>\n        </div>\n        <button className=\"delete\" value={props.id} onClick={props.onClick}>X</button>\n\n    </div>)\n}\n\nexport default Task;\n","import './NewTask.css';\n\nimport {React, useState, useEffect} from 'react';\n\nfunction NewTask(props){\n    const [id, setId] = useState(\n        JSON.parse(localStorage.getItem('idLocal') || 0)\n    )\n    \n    useEffect(() => {\n        localStorage.setItem('idLocal', id);\n      }, [id]);\n    \n    const [task, setTask] = useState({\n        complete:false, \n        key: id,\n        content:\"\"\n    });\n\n    const getTask =(event)=> {\n        setTask(prevState=> {\n            return{ ...prevState,\n                content:event.target.value}\n        })\n    }\n\n    const submitTask =(event)=>{\n        event.preventDefault()\n        props.addNewTask(task);\n    \n        setTask({\n            complete:false, \n            key:id+1,\n            content:\"\"});\n\n        setId(prevState=> prevState+1)\n    }\n\n    return(\n        <form onSubmit={submitTask}>\n           <button type=\"submit\"></button>\n           <input required placeholder='Create a new todo...'\n                  onChange={getTask} \n                  value={task.content}/>\n                  \n        </form>\n    )\n}\n\nexport default NewTask;","import \"./Stats.css\"\n\nfunction Stats(props){\n    return(<div className=\"stats\">\n        <span className=\"count\">{props.count} items left</span>\n\n        <div className=\"filter\">\n            <button className = {props.filter === \"All\" ? \"active\":\"\"} onClick={props.onClick} value=\"All\">All</button>\n            <button className = {props.filter === \"Active\" ? \"active\":\"\"} onClick={props.onClick} value=\"Active\">Active</button>\n            <button className = {props.filter === \"Completed\" ? \"active\":\"\"} onClick={props.onClick} value=\"Completed\">Completed</button>\n        </div>\n       \n        <button className = {props.filter === \"Clear\" ? \"active\":\"clear\"} onClick={props.clear} value=\"Clear\">Clear Completed</button>\n    </div>)\n}\n\nexport default Stats;\n\n","import './App.css';\nimport Task from './components/Task';\nimport NewTask from './components/NewTask';\nimport { useState, useEffect } from 'react';\n\nimport Stats from './components/Stats';\nimport { ReactSortable } from 'react-sortablejs';\n\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  \n  const [filter, setFilter] = useState(\n    localStorage.getItem('filterLocal') || 'All'\n  );\n\n  useEffect(() => {\n    localStorage.setItem('filterLocal', filter);\n  }, [filter]);\n\n  useEffect(() => {\n    getCount()\n\n  });\n\n  const [tasks, setTasks] = useState(\n    JSON.parse(localStorage.getItem('taskLocal')) || []\n  );\n\n  useEffect(() => {\n    localStorage.setItem('taskLocal', JSON.stringify(tasks));\n  }, [tasks]);\n  \n  const [filteredTasks, setFilteredTasks] = useState(tasks)\n\n  useEffect(() => {\n    filterTasks()\n  }, [filter, tasks])\n\n  \n\n  const changeFilter = (event) => {\n    setFilter(event.target.value);\n  }\n\n  const filterTasks = () => {\n    switch (filter) {\n      case \"Active\":\n        setFilteredTasks(tasks.filter(task => task.complete === false));\n        break;\n      case \"Completed\":\n        setFilteredTasks(tasks.filter(task => task.complete === true));\n        break;\n      default:\n        setFilteredTasks(tasks)\n    }\n  }\n\n\n  const getCount = () => {\n    const filteredTasks = tasks.filter(task => task.complete === false)\n    setCount(filteredTasks.length);\n  }\n\n  const addTask = (task) => {\n    setTasks([task, ...tasks])\n  }\n\n  const checkHandler = (event) => {\n    const newTodos = [...tasks]\n    const checkedTask = newTodos.find((task, index) => task.key === +event.target.value)\n    const index = (newTodos.indexOf(checkedTask))\n    newTodos[index].complete = !newTodos[index].complete;\n\n    setTasks(newTodos)\n  }\n\n  const clearCompleted = () => {\n    const newTodos = tasks.filter(task => task.complete === false)\n    setTasks(newTodos)\n  }\n\n  const deleteTask = (event) => {\n    const newTodos = tasks.filter(task => task.key !== +event.target.value);\n    setTasks(newTodos)\n  }\n\n  const taskList = filteredTasks.map((task, index) => {\n    return (<Task\n      key={task.key}\n      data-id={task.key}\n      id={task.key}\n      content={task.content}\n      checked={task.complete}\n      click={checkHandler}\n      onClick={deleteTask}></Task>)\n  }\n  );\n\n\n\n  return (\n    <div className=\"App\">\n      <h2>TODO</h2>\n      <div className=\"app\">\n        <NewTask addNewTask={addTask}></NewTask>\n\n        <div className='tasks'>\n\n          <ReactSortable animation={200} list={filteredTasks} setList={setFilteredTasks} \n\n            onEnd={(event) => {\n              const newItems = [...taskList]\n              let newTasks = [...tasks]\n              const keys = []\n\n              newItems.forEach(item=>{\n                keys.push(item.key)\n              })\n       \n              let final = []\n\n\n             keys.forEach((key,i)=>{\n              \n                newTasks.forEach((task,i)=>{\n                  if(task.key === +key){\n                    final.push(newTasks[i])\n                  }\n                })         \n             })\n             setTasks(final)\n            }}>\n\n            {taskList}\n\n          </ReactSortable>\n\n        </div>\n        <Stats filter={filter} onClick={changeFilter} clear={clearCompleted} count={count}></Stats>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}